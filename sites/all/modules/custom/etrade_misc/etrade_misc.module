<?php

/**
 * @file
 * Main file for the Etrade miscellaneous module, which containg logics for adding or alter node related functionality.
 * 
 * @ingroup etrade_misc
 */


function etrade_misc_menu() {
  $items['order-accept/%/%'] = array(
	  'title' => t('Accept Order'),
		'description' => 'User will accept order if he is intrested',
		'page arguments' => array(1,2),
		'page callback' => 'etrade_order_accept',
		'access arguments' => array('access content'),
  );

  $items['custom-api/flag'] = array(
	  'title' => t('Update Flag'),
		'description' => 'To update flag',
		'page callback' => 'etrade_flag_update',
		'access arguments' => array('access content'),
  );

  return $items;
}

function etrade_order_accept($arg1, $arg2){

  global $user;
  global $base_url;
 
  $another_user = $user->uid;
  $node_info = node_load($arg1);
  $node_info->field_another_user[LANGUAGE_NONE][0]['value'] = $another_user;
  
  $node_info = node_save($node_info);
  	
	//check if order is accepted through API or website
	if (isset($_GET['api']) && $_GET['api'] == 'Y') {
	  $result['status'] = '200'; 
	  $result['message'] = 'success'; 
	  print(json_encode($result)); exit;
	}
	else {

	  if($arg2 == 0){
			$redirect = 'trade-details';
	  }
	  else{
	    $redirect = 'trade-details';
	    //$redirect = 'trade-details?page='. $arg2;
	    drupal_goto($redirect, array('query' => array('page' => $arg2)));
	  }

	  drupal_goto($redirect);
	  drupal_set_message("Your request for order has been sent successfully");
	} 
}

/**
 * To update flag values throug api
 *
 */
function etrade_flag_update() {

	$data = json_decode(file_get_contents('php://input'), true);

	if (isset($data['flag_name']) && isset($data['action']) && isset($data['entity_id']) && isset($data['uid'])) {
		
		$flag = flag_get_flag($data['flag_name']);
 		$flag->flag($data['action'], $data['entity_id'], user_load($data['uid']), TRUE);

 		if (!empty($flag)) {
 			$result['status'] = 200;
 			$result['message'] = 'success';
 		}
 		else {
 			$result['status'] = 204;
 			$result['message'] = 'failure';
 		}
	}
	else {
		$result['status'] = 400;
 		$result['message'] = 'Parameter Missing';
	}

 	print(json_encode($result)); exit;
}

function etrade_misc_form_alter(&$form, &$form_state, $form_id) {	
	global $user;
	global $base_url;
	if($form_id == 'user_profile_node_form'){
		$userlink = $base_url . '/user/'.$user->uid.'/edit'; 
		$form['field_id_proof_of_authorized']['#suffix'] = '<a class="change-pass" href="'.$userlink.'">Change Password</a>';
 	}

 	if($form_id == 'user_login_block' || $form_id == 'user_login'){
 		$form['actions']['submit']['#value'] = 'Login';
 		$form['remember_me']['#title'] = 'Remember Me';
 	}
 	if($form_id == 'user_register_form'){
 		//$form['actions']['submit']['#value'] = t('Register Now');
 		$form['account']['mail']['#title'] = 'Email';
 		if (arg(0) == 'api') { // You might have to update this line depending on the path to your API
	      unset($form['captcha']);
	    }
 	}
 	if($form_id == 'webform_client_form_5') {
 		$form['actions']['submit']['#value'] = 'Submit';
 	}
 	if($form_id == 'webform_client_form_61'){
 		if(isset($_REQUEST['nid']) && !empty($_REQUEST['nid'])) {
 			$node_info = node_load($_REQUEST['nid']);
 			$form['submitted']['commodity']['#webform_component']['value'] = $node_info->title;
 			$form['submitted']['commodity']['#default_value'] = $node_info->title;
 			if(isset($node_info->field_total_quantity[LANGUAGE_NONE]) && !empty($node_info->field_total_quantity[LANGUAGE_NONE])) {
 				$form['submitted']['qty']['#webform_component']['value'] = $node_info->field_total_quantity[LANGUAGE_NONE][0]['value'];
 				$form['submitted']['qty']['#default_value'] = $node_info->field_total_quantity[LANGUAGE_NONE][0]['value'];
 			}

 			if(isset($node_info->field_load_port[LANGUAGE_NONE]) && !empty($node_info->field_total_quantity[LANGUAGE_NONE])) {
 				$form['submitted']['load_port']['#webform_component']['value'] = $node_info->field_load_port[LANGUAGE_NONE][0]['value'];
 				$form['submitted']['load_port']['#default_value'] = $node_info->field_load_port[LANGUAGE_NONE][0]['value'];
 			}
 		}
 	}
}


/**
 * To alter commodity-node-form form 
 */
function etrade_misc_form_commodity_node_form_alter(&$form, $form_state, $form_id) {
	
	$node = $form_state['node'];

	// alter form on form updation
	if (isset($node->nid)) {		
		$form['field_another_user']['#access'] = FALSE;

		$buyer = "";
		$seller = "";

		if(isset($node->field_commodity_type[LANGUAGE_NONE]) && !empty($node->field_commodity_type[LANGUAGE_NONE])){

			//comodity 0 means buyes and 1 means seller
	        if($node->field_commodity_type[LANGUAGE_NONE][0]['value'] == 0) {	            
	            $buyer_info = user_load($node->uid);
		        $seller_info = user_load($node->field_another_user[LANGUAGE_NONE][0]['value']);
		        $buyer = $buyer_info->name;
		        $seller = $seller_info->name;
	        }
	        else {
	            $buyer_info = user_load($node->field_another_user[LANGUAGE_NONE][0]['value']);
		        $seller_info = user_load($node->uid);
		        $buyer = $buyer_info->name;
		        $seller = $seller_info->name;
	        }
	    }

	    $form['field_buyer_commission']['#prefix'] = '<div class="buyer-name"> <span>Buyer Name:</span>' . $buyer . '</div>';
	    $form['field_buyer_commission']['#prefix'] .= '<div class="seller-name"> <span>Seller Name:</span>' . $seller . '</div>';
	    
	}
} 

function etrade_misc_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  if($form['#form_id'] == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-countrywise-commodities-block-1'){
    $form['field_commodity_type_value']['#options'][0] = 'Buy Order';
    $form['field_commodity_type_value']['#options'][1] = 'Sell Order';
  }  
}

function etrade_misc_views_query_alter(&$view, &$query) {
	global $user;
	if($view->name == 'user_order_acceptance_details') {
	    $query->where['2']['conditions']['0']['value'] = $user->uid;
	    $query->where['2']['conditions']['1']['value'][0] = $user->uid;
	}

	// to alter query for trade orders views services
	if(($view->name == 'orders') && (($view->current_display == 'services_3') || ($view->current_display == 'services_4'))) {
		if (isset($_REQUEST['uid'])) {
			$query->where['2']['conditions']['0']['value'] = $_REQUEST['uid'];
	    	$query->where['2']['conditions']['1']['value'][0] = $_REQUEST['uid'];
		}	    
	}

}
function etrade_misc_node_presave($node) {
	if(($node->field_buyer_commission['und'][0]['value'] != $node->original->field_buyer_commission['und'][0]['value']) && ($node->field_seller_commission['und'][0]['value'] != $node->original->field_seller_commission['und'][0]['value'])) {
	  	$changed = $node->changed;
	  	$nid = $node->nid;
		
		$dompdf_lib_path = function_exists('libraries_get_path') ? libraries_get_path('dompdf') : 'sites/all/libraries/dompdf';
 		$dompdf_platform = $dompdf_lib_path . '/dompdf_config.inc.php';
 		
		require_once($dompdf_platform);
		$term_contract = taxonomy_term_load(25);
		$html = $term_contract->description;
 
		$commodity_type = $node->field_commodity_type['und'][0]['value'];
		$commodity = taxonomy_term_load($node->field_commodity['und'][0]['tid']);
		$commodity_list_name = $commodity->name;

		$current_date = date('d-m-Y h:i:s');

		$another_user = $node->field_another_user['und'][0]['value'];
		$user_id = $node->uid;
		if($commodity_type == 0) { //For Buy Commodity Type
			$buyer = user_load($user_id);
			$seller = user_load($another_user);
		}
		else {                     //For Sell Commodity Type
			$buyer = user_load($another_user);
			$seller = user_load($user_id);			
		}
		// Buyer Address
		$queryBuyer = new EntityFieldQuery();
		$entitiesBuyer = $queryBuyer->entityCondition('entity_type', 'node')
						->propertyCondition('type', 'user_profile')
						->propertyCondition('uid',  $buyer->uid, '=')
						->propertyCondition('status', 1)
						->range(0,1)
						->execute();

		if (!empty($entitiesBuyer['node'])) {
			$buyer_node = node_load(array_shift(array_keys($entitiesBuyer['node'])));
		}

		// Seller Address
		$querySeller = new EntityFieldQuery();
		$entitiesSeller = $querySeller->entityCondition('entity_type', 'node')
						->propertyCondition('type', 'user_profile')
						->propertyCondition('uid',  $seller->uid, '=')
						->propertyCondition('status', 1)
						->range(0,1)
						->execute();

		if (!empty($entitiesSeller['node'])) {
			$seller_node = node_load(array_shift(array_keys($entitiesSeller['node'])));
		}

		$seller_name = $seller->name;
		$seller_address = $seller_node->field_address_company['und'][0]['value'];
		$seller_autho_person_address = $seller_node->field_address_of_authorized_pers['und'][0]['value'];
		$buyer_name = $buyer->name;
		$buyer_address = $buyer_node->field_address_company['und'][0]['value'];
		$buyer_autho_person_address = $buyer_node->field_address_of_authorized_pers['und'][0]['value'];

		$commodity_name = $node->title;
		$quantity = $node->field_total_quantity['und'][0]['value'];
		$price = $node->field_price_per_metric_ton['und'][0]['value'];
		$seller_brokerage = $node->field_seller_commission['und'][0]['value'];
		$buyer_brokerage = $node->field_buyer_commission['und'][0]['value']; 

		$quality_specification = $node->field_quality_specification_and_['und'][0]['value'];
		$certificate = $node->field_quality_assaying['und'][0]['value'];
		$name_of_agency = "-";
		if($certificate == 0 && !empty($node->field_name_of_the_agency['und'][0]['value'])) {			
			$name_of_agency = $node->field_name_of_the_agency['und'][0]['value'];
		}

		$price_type = $node->field_price_type['und'][0]['value'];
		$latest_loading_date = $node->field_latest_loading_date['und'][0]['value'];
		
		$load_port = "";
		foreach($node->field_load_port['und'] as $index => $info) {
			$load_port .= $info['value'] . ", ";
		}
		$load_port = rtrim($load_port, ", ");

		$delivery_port = "";		
		foreach($node->field_delivery_port['und'] as $index => $info) {
			$delivery_port = $info['value'] . ", ";
		}
		$delivery_port = rtrim($delivery_port, ", ");

		$seller_sign = '';
		$buyer_sign = '';

		$html = str_replace("##COMMODITY_TYPE##", $commodity_type, $html);
		$html = str_replace("##COMMODITY_LIST_NAME##", $commodity_list_name, $html);
		$html = str_replace("##CURRENT_DATE##", $current_date, $html);
		$html = str_replace("##SELLER_NAME##", $seller_name, $html);
		$html = str_replace("##SELLER_ADDRESS##", $seller_address, $html);
		$html = str_replace("##BUYER_NAME##", $buyer_name, $html);
		$html = str_replace("##BUYER_ADDRESS##", $buyer_address, $html);
		$html = str_replace("##COMMODITY_NAME##", $commodity_name, $html);
		$html = str_replace("##QUANTITY##", $quantity, $html);
		$html = str_replace("##PRICE##", $price, $html); 
		$html = str_replace("##SELLER_BROKERAGE##", $seller_brokerage, $html); 
		$html = str_replace("##BUYER_BROKERAGE##", $buyer_brokerage, $html); 
		$html = str_replace("##QUALITY_SPECIFICATIONS##", $quality_specification, $html); 
		$html = str_replace("##CERTIFICATE##", $certificate, $html); 
		$html = str_replace("##NAME_OF_AGENCY##", $name_of_agency, $html); 

		$html = str_replace("##PRICE_TYPE##", $price_type, $html); 
		$html = str_replace("##LATEST_LOADING_DATE##", $latest_loading_date, $html); 
		$html = str_replace("##LOAD_PORT##", $load_port, $html); 
		$html = str_replace("##DELIVERY_PORT##", $delivery_port, $html); 
		$html = str_replace("##BUYER_AUTHO_PERSON_ADDRESS##", $buyer_autho_person_address, $html); 
		$html = str_replace("##SELLER_AUTHO_PERSON_ADDRESS##", $seller_autho_person_address, $html); 

		$html = str_replace("##SELLER_SIGN##", $seller_sign, $html); 
		$html = str_replace("##BUYER_SIGN##", $buyer_sign, $html);
 
		$dompdf = new DOMPDF;
		$dompdf->load_html($html);
		$dompdf->render();
		$pdfoutput = $dompdf->output();

		// This does not save the pdf field and instead it opens a dialog box asking whether you have to save the pdf or not
		#$dompdf->stream("sample.pdf");
	
		//  Checks whether there is an output folder inside sites/default/files
		if (!is_dir('public://contract')) {
		  mkdir("public://contract", 0777);
		}

	    //  Creates a folder and changes its permissions}
	    $filename = "sites/default/files/contract/contract_{$nid}.pdf";
	    $fp = fopen($filename, "w+");
	    fwrite($fp, $pdfoutput);
	    
	    //  Writes the pdf output to a file
	    fclose($fp);
	
	}
}